1. Validate A Password : 
# Python3 code to validate a password

# A utility function to check
# whether a password is valid or not
def isValid(password):

    # for checking if password length
    # is between 8 and 15
    if (len(password) < 8 or len(password) > 15):
        return False

    # to check space
    if (" " in password):
        return False

    if (True):
        count = 0

        # check digits from 0 to 9
        arr = ['0', '1', '2', '3', 
        '4', '5', '6', '7', '8', '9']

        for i in password:
            if i in arr:
                count = 1
                break

        if count == 0:
            return False

    # for special characters
    if True:
        count = 0

        arr = ['@', '#','!','~','$','%','^',
                '&','*','(',',','-','+','/',
                ':','.',',','<','>','?','|']

        for i in password:
            if i in arr:
                count = 1
                break
        if count == 0:
            return False

    if True:
        count = 0

        # checking capital letters
        for i in range(65, 91):

            if chr(i) in password:
                count = 1

        if (count == 0):
            return False

    if (True):
        count = 0

        # checking small letters
        for i in range(97, 123):

            if chr(i) in password:
                count = 1

        if (count == 0):
            return False

    # if all conditions fails
    return True

# Driver code
password1 = "GeeksForGeeks"

if (isValid([i for i in password1])):
    print("Valid Password")
else:
    print("Invalid Password!!!")

password2 = "Geek$ForGeeks7"
if (isValid([i for i in password2])):
    print("Valid Password")
else:
    print("Invalid Password!!!")


2:Sorted array numbers, target sum target
# Optimized â†’ Two Pointers (O(n))
 class Solution:
    def twoSum(self, numbers, target):
        left, right = 0, len(numbers) - 1
        
        while left < right:
            curr_sum = numbers[left] + numbers[right]
            
            if curr_sum == target:
                return [left + 1, right + 1]  # 1-based indexing
            elif curr_sum < target:
                left += 1
            else:
                right -= 1

3: Reverse String : 
class Solution:
    def reverseString(self, s: List[str]) -> None:
        left, right = 0, len(s) - 1
        while left < right:
            s[left], s[right] = s[right], s[left]  # swap
            left += 1
            right -= 1
        # No return needed, since it's in-place

4: class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False

        count = {}
        for ch in s:
            count[ch] = count.get(ch, 0) + 1

        for ch in t:
            if ch not in count:
                return False
            count[ch] -= 1
            if count[ch] < 0:
                return False

        return True
